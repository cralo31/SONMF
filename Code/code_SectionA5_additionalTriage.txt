################################################################
####### Additional Triage Data Analyses ############
################################################################

###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!###
### Run Simulation and Generate Results ###
###!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!###

# Read data (Change to your local directory)
dataset = "Altered_Level_of_Consciousness"
dset = read_csv(paste0("C:/Users/cronshells/Dropbox/Jack Li/1_SONMF/JASA_SONMF_3rd_Submission/", 
                          dataset, ".csv"))
# Clean data
word.mat = clean.dat(dset, 'tfidf')

############################################################################
# Density Plot: Number of Topics Each Word Belongs to (Figure 11)

alc_sonmf = wrapTopic(word.mat, 40, "sonmf", 1031, 10, 10) 
alc_nmf = wrapTopic(word.mat, 40, "nmf", 1031, 10, 10)    

clustMember(alc_sonmf$topicMat, "red", "(SONMF)")   # Figure 11 Top
clustMember(alc_nmf$topicMat, "black", "(NMF)")   # Figure 11 Bottom

############################################################################
# Elbow plot (Figure 12)
elb_sonmf = wrapTopic(word.mat, 30, "sonmf", 1031, 30, 30)
elbplot(elb_sonmf)

############################################################################
# Classification Results for Remaining Dataset

# Refer to the code in Section 6.1 for the classification analysis pipeline.
# Note that the remaining six datasets are not available to the public due to privacy reasons.

###+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++###
###+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++###

################################################################

# Generate k topic vectors for a given data set
topics = function(word.mat, k, method, seed) {
  
  # Initial setup of paramters
  set.seed(seed)
  words = colnames(word.mat)[-1]
  inits = "svd"
  if (method == "semi") {
    inits = "kmeans"
  }
  
  # Factorize the bag-of-words matrix
  res = nmf.main(t(word.mat[,-1]), 1, k, method, inits, 30, 1e-10, sparse_svd = T)
  F.mat = res$F; G.mat = res$G
  rownames(F.mat) = words; 
  colnames(F.mat) = colnames(G.mat) = paste0("T", 1:k)
  
  return(list(F = F.mat, G = G.mat))
}


# function to calculate norm of a vector
norm_vec <- function(x) sqrt(sum(x^2))

# Organize the topics according to the corresponding norm in G
# Analgous to SVD, where the eigenvectors (F) are sorted in descending order
# according to the eigenvalues (norm of G)
top.words = function(mat.list, num_topics, num_words) {
  
  F.m = mat.list$F; G.m = mat.list$G
  
  # Sort the topics according to the corresponding norm in G 
  # Topics with larger norms are considered to be "leading" topics
  col.norm = apply(G.m, 2, norm_vec)
  temp = rbind(F.m, col.norm)
  sort.F = temp[,order(temp[nrow(temp),], decreasing = T)]
  mat = sort.F[-nrow(sort.F),]
  col.norm = sort(col.norm, decreasing = T)
  
  res = list()
  for(i in 1:num_topics) {
    positive = tail(sort(mat[,i], decreasing = FALSE), num_words);
    positive = positive[order(-positive)]
    negative = head(sort(mat[,i]), num_words)
    vec.1 = cbind(names(positive), positive, names(negative), negative)
    rownames(vec.1) = NULL
    vec.1[,c(2,4)] = round(as.numeric(vec.1[,c(2,4)]), 4)
    res[[i]] = vec.1
  }
  return(list(res = res, norm = col.norm))
}

# Wrapper function to generate word-topic matrix 
wrapTopic = function(word.mat, k, method, seed, nTopics, nWords) {
  
  topicMat = topics(word.mat, k, method, seed)
  topWords = top.words(topicMat, nTopics, nWords)
  
  return(list(topicMat = topicMat, topWords = topWords))
}


##################################################################
# Density plot for Cluster Membership of Words (Figure 11) ###

clustMember = function(soMat, color, stri) {
  
  # Calculate the number of clusters each word belongs to
  nmf.count = apply(soMat$F, 1, function(x) sum(x > 0))
  nmf.count = sort(nmf.count, decreasing = T)
  nmf.count = data.frame(cbind(nmf.count, 1:length(nmf.count)))
  
  densityplot(nmf.count$nmf.count, col = color, 
              main = list(paste0("Density Plot: Number of Clusters Each Word Belongs to ", stri), cex = 1.2),
              xlab = list("Number of Topic Memberships", cex = 1.5), 
              ylab = list("Density", cex = 1.5),
              lwd = 2)
}


##################################################################
### Elbow Plot (Figure 12) ### 

set.seed(1031)

# Output the elbow plot
elbplot = function(mfac) {
  plot(mfac$topWords$norm, type = "l", col = "blue", lwd = 2, 
     main = "Norm of the Word-Topic Vectors Generated by SONMF on ALC", ylab = "Norm", xlab = "Topics",
     cex.lab = 1.5, cex.axis = 1.2, cex.main = 1.5)
  points(mfac$topWords$norm, pch = 15, col = "blue")
}
